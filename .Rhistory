summary.corr <- function(x, digits = 3){
text <- paste0("The correlation between ",
x$x,
" and ",
x$y,
" is ",
x$stas$estimate,
" t(",
x$stats$statistic,
")= ",
"p = ", format.pval(x$stats$p.value, digits),
".")
cat(text)
}
summary.corr(result)
summary.corr <- function(x, digits = 3){
text <- paste0("The correlation between ",
x$x,
" and ",
x$y,
" is ",
x$stats$estimate,
" t(",
x$stats$statistic,
")= ",
"p = ", format.pval(x$stats$p.value, digits),
".")
cat(text)
}
summary.corr(result)
summary.corr <- function(x, digits = 3){
text <- paste0("The correlation between ",
x$x,
" and ",
x$y,
" is ",
round(x$stats$estimate, digits),
" t(",
round(x$stats$statistic, digits),
")= ",
"p = ", format.pval(x$stats$p.value, digits),
".")
cat(text)
}
summary.corr(result)
plot(z)
# simulate a classroom with N students
sample(1:365, 10)
# simulate a classroom with N students
sample(1:365, 10, replace = TRUE)
?set.seed
set.seed(1234)
sample(1:10, 5, replace = TRUE)
n <-10
set.seed(1234)
sample(1:365, n, replace = TRUE)
set.seed(1234)
x <- sample(1:365, n, replace = TRUE)
duplicated(x)
any(duplicated(x))
k <- 1000
n <- 10
trials <- numeric(k)
k <- 1000
n <- 10
trials <- numeric(k)
for(i in 1:k){
x <- sample(1:365, n, replace = TRUE)
trials[i] <- any(duplicate(x))
}
k <- 1000
n <- 10
trials <- numeric(k)
for(i in 1:k){
x <- sample(1:365, n, replace = TRUE)
trials[i] <- any(duplicated(x))
}
?in
#repeat this for n = 10 ... 100 by 5
for(i in 10:100 by 5){
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
myprob <- numeric(myseq)
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
myprob <- numeric(myseq)
myprob <- c()
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
myprob <- c()
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, n, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob <- append(myprob,mean(trials))
}
myprob
myprob <- numeric(length(myseq))
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, n, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob <- append(myprob,mean(trials))
}
myprob
myprob <- c()
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
myprob <- c()
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, n, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob <- append(myprob,mean(trials))
}
myprob
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, m, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob <- append(myprob,mean(trials))
}
myprob
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
k <- 1000
myprob <- c()
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, m, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob <- append(myprob,mean(trials))
}
myprob
myprob <- numeric(length(myseq))
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
k <- 1000
myprob <- numeric(length(myseq))
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, m, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob[m]<-mena(trials)
}
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
k <- 1000
myprob <- numeric(length(myseq))
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, m, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob[m]<-mean(trials)
}
myprob
z <- 1
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, m, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob[z]<-mean(trials)
z<-z+1
}
myprob
probability <- mean(trials)
#repeat this for n = 10 ... 100 by 5
myseq <- seq(10, 100, by = 5)
k <- 1000
myprob <- numeric(length(myseq))
z <- 1
for(m in myseq ){
for(i in 1:k){
x <- sample(1:365, m, replace = TRUE)
trials[i] <- any(duplicated(x))
}
myprob[z]<-mean(trials)
z<-z+1
}
myprob
results <- data.frame( c_size = myseq,
probability = myprob
)
View(results)
library(ggplot2)
ggplot(results,
aes(x = c_size
y = probability)) +
library(ggplot2)
ggplot(results,
aes(x = c_size
y = probability)) +
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point()
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point()+
geom_smooth
library(ggplot2)
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point()+
geom_smooth
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line()
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
geom_smooth
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
geom_smooth()
library(ggplot2)
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
xlim(10, 100)
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5))
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5)) +
scale_y_continuous(breaks = seq(0,1,0.1))
library(ggplot2)
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5)) +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_line(y=0.6)
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5)) +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_hline(yintercept = .6, color ="red")
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5)) +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_vline(yintercept = .6, color ="red")
ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5)) +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_hline(yintercept = .6, color ="red")
p <-ggplot(results,
aes(x = c_size,
y = probability)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10, 100, 5)) +
scale_y_continuous(breaks = seq(0,1,0.1)) +
geom_hline(yintercept = .6, color ="red")
library(plotly)
ggplotly(p)
library(usethis)
create_package("ryx")
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao//new_ryx")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("yuanmianbao//new_ryx")
remotes::install_github("yuanmianbao/importR")
remotes::install_github("yuanmianbao/new_ryx")
x <-ryx(mtcars, "cyl")
library(ryx)
x <- ryx(mtcars, "cyl")
print.ryx(x)
?ryx
help(package = "ryx")
plot.ryx(x)
print.ryx(x)
summary.ryx(x)
View(result)
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao//new_ryx")
remotes::install_github("yuanmianbao/new_ryx")
library(ryx)
library(ryx)
myryx<- ryx(mtcars, "cyl")
print.ryx(myryx)
x
print(x)
summary(x)
plot(x)
data <-as.data.frame(matrix(rnorm(8e5*150, mean = 5, ncol = 150)))
data <-as.data.frame(matrix(rnorm(8e5*150, mean = 5, ncol = 150)))
data <-as.data.frame(matrix(rnorm(8e5*150, mean = 5), ncol = 150)))
data <-as.data.frame(matrix(rnorm(8e5*150, mean = 5), ncol = 150))
center_cols <- function(d){
#get a vector column means
means <- apply(d, 2, mean)
#subtract mean from column
for(i in seq_along(means)){
d[ , i] <- d[ , i] - means[i]
}
return(d)
}
#run
result <- center_cols(data)
#run
result <- center_cols(data)
data <-as.data.frame(matrix(rnorm(8e5*150, mean = 5), ncol = 150))
center_cols <- function(d){
#get a vector column means
means <- apply(d, 2, mean)
#subtract mean from column
for(i in seq_along(means)){
d[ , i] <- d[ , i] - means[i]
}
return(d)
}
#run
result <- center_cols(data)
#time a function
system.time({
result <- center_cols(data)
}
)
#time a function
system.time({
result <- center_cols(data)
})
#time a function
system.time({
result <- center_cols(data)
})
profvis::profvis({result <- center_cols(data)})
profvis::profvis({
center_cols <- function(d){
#get a vector column means
means <- apply(d, 2, mean)
#subtract mean from column
for(i in seq_along(means)){
d[ , i] <- d[ , i] - means[i]
}
return(d)
}
#run
result <- center_cols(data)
})
profvis::profvis({
means <- apply(data, 2, mean)
means <- colMeans(data)
means <- lapply(data, mean)
means <- vapply(data, mean, numeric(1))
})
profvis::profvis({
means <- apply(data, 2, mean)
means <- colMeans(data)
means <- lapply(data, mean)
means <- vapply(data, mean, numeric(1))
})
center_cols <- function(d){
#get a vector column means
means <- lapply(d, mean)
#subtract mean from column
for(i in seq_along(means)){
d[ , i] <- d[ , i] - means[i]
}
return(d)
}
#time a function
system.time({
result <- center_cols(data)
})
profvis::profvis({
means <- apply(data, 2, mean)
means <- colMeans(data)
means <- lapply(data, mean)
means <- vapply(data, mean, numeric(1))
})
# create empty vector and grow it
method1 <- function(n){
vec <- c()
for(i in seq_len(n)){
vec <- c(vec, i)
}
return(vec)
}
method2 <- function(n){
vec<- numeric(n)
for(i in seq_len(n))
vec[i] <- i
}
method2 <- function(n){
vec<- numeric(n)
for(i in seq_len(n))
vec[i] <- i
return(vec)
}
method3 <- function(n){
seq_len(n)
}
n <- 1e4
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(times = 20, unit = "s",
method1(n), method2(n), method3(n))
n <- 1e8
library(microbenchmark)
microbenchmark(times = 20, unit = "s",
method1(n), method2(n), method3(n))
n <- 1e5
library(microbenchmark)
microbenchmark(times = 20, unit = "s",
method1(n), method2(n), method3(n))
n <- 1e4
library(microbenchmark)
microbenchmark(times = 25, unit = "s",
method1(n), method2(n), method3(n))
if (!require("remotes")){
install.packages("remotes")
}
remotes::install_github("yuanmianbao/importR")
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao/new_ryx")
library(ryx)
x <- ryx(mtcars, "cyl")
print.ryx(x)
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao/new_ryx")
library(ryx)
myryx<- ryx(mtcars, "cyl")
print(myryx)
plot(myryx)
summary(myryx)
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao/new_ryx")
library(ryx)
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao/new_ryx")
library(ryx)
library(MASS)
myryx<- ryx(Boston, "medv")
print(myryx)
plot(myryx)
summary(myryx)
if(!require(remotes)){
install.packages("remotes")
}
remotes::install_github("yuanmianbao/new_ryx")
library(ryx)
library(MASS)
myryx<- ryx(Boston, "medv")
print(myryx)
plot(myryx)
summary(myryx)
?ryx
?plot.ryx
?summary.ryx
?print.ryx
vignette("ryx")
??ryx
help(package = "ryx")
getwd
getwd()
setwd("~/qacMiss")
